export function nerosetAnswer(inputCode) {
    inputCode = inputCode.split("_")
    let mp = inputCode.shift();
    mp = [mp[0], mp[1], mp[2], mp[3], mp[4], mp[5], mp[6], mp[7]];

    const switcherMp = [{
        'A': 2.09294634,
        'B': 1.488517871,
        'C': 0.61234,
        'D': 0.279660933,
        'F': -0.324767536,
        'G': -0.929196004
    },
        {'A': 1.679770345, 'B': 1.143843616, 'C': 0.607916887, 'D': 0.071990158, 'F': -0.463936572, 'G': -0.999863301},
        {'A': 1.424913152, 'B': 0.77546294, 'C': 0.126012728, 'D': -0.523437484, 'F': -1.172887697, 'G': -1.822337909},
        {'A': 1, 'B': 0.5, 'C': 0, 'D': -0.5, 'F': -1, 'G': -1.5},
        {'A': 1.502234111, 'B': 0.972498925, 'C': 0.56671, 'D': -0.086971449, 'F': -0.616706635, 'G': -1.146441822},
        {'A': 1.474846863, 'B': 0.903663396, 'C': 0.332479929, 'D': -0.238703539, 'F': -0.809887006, 'G': -1.381070473},
        {'A': 1, 'B': 0.414030001, 'C': -0.741803751, 'D': -1.897637503, 'F': -3, 'G': -4.209305006},
        {'I': 1.622875328, 'K': -0.076072281, 'J': -1.77501989, 'H': -3.473967498}]

    for (let i = 0; i < mp.length; i++) {
        mp[i] = switcherMp[i][mp[i]];
    }


    const ans = [1, 2, 3, 4, 5]

    const statist_max_input = [2.09294633990614e+000, 1.67977034528084e+000, 1.42491315196637e+000, 1.00000000000000e+000,
        1.50223411130180e+000, 1.47484686338413e+000, 4.14030000618644e-001, 1.62287532754303e+000]
    const statist_min_input = [-9.29196004354884e-001, -9.99863300762405e-001, -1.82233790863726e+000, -1.50000000000000e+000,
        -1.14644182178295e+000, -1.38107047322676e+000, -4.20930500628954e+000, -3.47396749802180e+000]
    const statist_i_h_wts = [[4.03342047994759e+000, -3.94866400621448e+000, 2.88567555423410e+000, -3.25539245486725e+000,
        -3.27250411470445e+000, 2.46698142741432e+000, -5.50153864926967e+000, 1.02039955656996e-001],
        [-5.00017038162170e+000, -2.58524523754094e+000, -2.54952069376839e+000, -2.53373793842811e-002,
            -3.09733770599676e-001, -9.97941771989659e-002, -1.42389513499303e+000, 3.22737054293394e+000],
        [-5.37808148030617e+000, -8.17905783097510e+000, -6.50167959846491e-001, -3.77013606704126e+000,
            1.33959685974068e+000, -1.95583089663265e+000, 3.18884659325176e+000, 2.75949602744694e+000],
        [5.38615341306551e+000, 8.00778399851013e-001, 3.89096309042254e+000, -3.55724207098276e-001,
            2.30418206815930e+000, 7.24126701498181e-001, 1.80696263161431e+000, -2.14731370245658e+000],
        [-2.07878714039763e+000, -2.31984807718639e-002, -8.07291348305025e+000, -3.95627981675698e+000,
            4.70071590154296e+000, -5.23085420611089e-001, -6.23698416785966e+000, 3.98508166798585e+000],
        [5.19114614154019e+000, 2.89961979867653e+000, -5.09218075798370e+000, -3.87353049559184e+000,
            1.01629933930984e+001, -9.02312051045565e-001, -1.95024179605704e-001, -5.13930431709813e-001],
        [-4.66933032536568e+000, -2.52500362952472e+000, 7.98352047973531e+000, 7.42125159130894e+000,
            -8.49824198295943e+000, 1.75312573497009e+000, 3.25842623163126e+000, -7.76053210850751e-002]]

    const statist_h_o_wts = [[1.97903025591601e+000, 1.24325309527047e+000, 5.09363380239322e+000, 9.52180626815853e-001,
        -1.60956266174281e+000, -3.51306953128194e+000, 5.43191504011135e+000],
        [2.98064732022348e+000, -4.43412654815966e+000, 9.51054913416178e-001, 4.88861775310657e+000,
            -7.09554334071466e+000, 6.16761481759768e+000, -1.26358670281579e+000],
        [2.15076413886110e+000, -5.06930877606423e+000, -1.14379541826283e+001, 1.93241851017341e+000,
            -4.71205543850956e+000, -1.37018870854279e+000, 1.63313211215726e+000],
        [4.03600116995063e+000, 9.17950385771500e+000, 3.68417416997965e+000, -4.09308654120856e+000,
            1.30698539651707e+001, -2.48380919188506e+000, 1.08695506095633e+000],
        [-1.11231663712863e+001, -9.07617982067898e-001, 1.59956350707716e+000, -3.50512710293279e+000,
            3.70902422290945e-001, 9.89110478220834e-001, -6.85081021737414e+000]]

    const statist_hidden_bias = [4.71766552595390e-001, 4.49566310383849e+000, 3.14501839993609e+000, -2.26080716355296e+000,
        6.49534709186450e+000, 9.98404345509917e-001, -1.43318432048074e+000];

    const statist_output_bias = [9.05767131443253e-001, -4.30631463478289e+000, -4.53019048226815e-001, -1.30512078590522e+001,
        1.70727049077512e+001];

    const statist_outputs = [-1.0e+307, -1.0e+307, -1.0e+307, -1.0e+307, -1.0e+307];
    let statist_delta = 0;
    let statist_maximum = 1;
    let statist_minimum = 0;
    let statist_ncont_inputs = 8;

    for (let i = 0; i < statist_ncont_inputs; i++) {

        statist_delta = (statist_maximum - statist_minimum) / (statist_max_input[i] - statist_min_input[i]);
        mp[i] = statist_minimum - statist_delta * statist_min_input[i] + statist_delta * mp[i];
    }

    let statist_ninputs = 8;
    let statist_nhidden = 7;
    let statist_hidden = [0, 0, 0, 0, 0, 0, 0];

    for (let i = 0; i < statist_nhidden; i++) {
        statist_hidden[i] = 0.0

        for (let j = 0; j < statist_ninputs; j++) {
            statist_hidden[i] = statist_hidden[i] + (statist_i_h_wts[i][j] * mp[j])

        }
        statist_hidden[i] = statist_hidden[i] + statist_hidden_bias[i]
    }


    let statist_noutputs = 5

    for (let i = 0; i < statist_noutputs; i++) {
        statist_outputs[i] = 0.0
        for (let j = 0; j < statist_nhidden; j++) {
            statist_outputs[i] = statist_outputs[i] + (statist_h_o_wts[i][j] * statist_hidden[j])
        }
        statist_outputs[i] = statist_outputs[i] + statist_output_bias[i]
    }

    let statist_sum = 0
    let statist_maxIndex = 0
    for (let j = 0; j < statist_noutputs; j++) {
        if (statist_outputs[j] > 200) {
            let statist_max = statist_outputs[1]
            statist_maxIndex = 0
            for (let i = 0; i < statist_noutputs; i++) {
                if (statist_outputs[i] > statist_max) {
                    statist_max = statist_outputs[i]
                    statist_maxIndex = i
                }
            }
            for (let k = 0; k < statist_noutputs; k++) {
                if (k === statist_maxIndex)
                    statist_outputs[j] = 1.0
                else {
                    statist_outputs[k] = 0.0
                }
            }
        } else {

            statist_outputs[j] = Math.exp(statist_outputs[j])
            statist_sum = statist_sum + statist_outputs[j]
        }
    }

    let statist_ConfLevel = 3.0E-300
    let statist_PredIndex = 1
    for (let i = 0; i < statist_noutputs; i++) {

        if (statist_ConfLevel < statist_outputs[i]) {
            statist_ConfLevel = statist_outputs[i]
            statist_PredIndex = i
        }

    }

    return ans[statist_PredIndex]
}
